// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  passwordHash  String?

  // Auth
  accounts Account[]
  sessions Session[]

  // Domain
  songs     Song[]
  playlists Playlist[]
  likes     Like[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Song {
  id        String   @id @default(cuid())
  title     String
  artist    String
  imageUrl  String
  audioUrl  String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  likes     Like[]
  playlists PlaylistSong[]
  createdAt DateTime @default(now())
}

model Playlist {
  id        String         @id @default(cuid())
  name      String
  imageUrl  String?
  userId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  songs     PlaylistSong[]
  createdAt DateTime       @default(now())
}

model PlaylistSong {
  id         String   @id @default(cuid())
  playlistId String
  songId     String
  order      Int      @default(0)
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  song       Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([playlistId, songId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  songId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  song      Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, songId])
}
